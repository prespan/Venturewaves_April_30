generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Studio {
  id            Int                   @id @default(autoincrement())
  name          String
  website       String
  address       String
  description   String
  keyStartups   Json
  logo          String?
  createdAt     DateTime              @default(now())
  collaborators ProjectCollaborator[]
  proposals     Proposal[]
}

model Corporate {
  id              Int                   @id @default(autoincrement())
  name            String
  website         String
  address         String
  industryTags    Json
  description     String
  notableProducts Json
  logo            String?
  createdAt       DateTime              @default(now())
  challenges      Challenge[]
  collaborators   ProjectCollaborator[]
}

model Government {
  id            Int                   @id @default(autoincrement())
  name          String
  address       String
  website       String
  focusAreas    Json
  description   String
  logo          String?
  createdAt     DateTime              @default(now())
  challenges    Challenge[]
  collaborators ProjectCollaborator[]
}

model ResearchOrganization {
  id           Int         @id @default(autoincrement())
  name         String
  website      String
  address      String
  focusDomains Json
  description  String
  logo         String?
  createdAt    DateTime    @default(now())
  challenges   Challenge[]
}

model Investor {
  id                 Int                   @id @default(autoincrement())
  name               String
  website            String
  address            String
  focus              Json
  notableInvestments Json
  logo               String?
  createdAt          DateTime              @default(now())
  collaborators      ProjectCollaborator[]
}

model Challenge {
  id                Int                   @id @default(autoincrement())
  title             String
  description       String
  submittedBy       String
  deadline          DateTime
  postedAt          DateTime
  phase1Budget      Int
  capitalCommitment Int
  equityOffered     Int
  hasProposals      Boolean               @default(false)
  projectLinked     Boolean               @default(false)
  corporateId       Int?
  governmentId      Int?
  researchOrgId     Int?
  corporate         Corporate?            @relation(fields: [corporateId], references: [id])
  government        Government?           @relation(fields: [governmentId], references: [id])
  researchOrg       ResearchOrganization? @relation(fields: [researchOrgId], references: [id])
  project           Project?
  proposals         Proposal[]
}

model Proposal {
  id            Int       @id @default(autoincrement())
  challengeId   Int
  title         String
  description   String
  actionPlan    Json
  submittedBy   String
  submittedAt   DateTime  @default(now())
  status        String    @default("PENDING")
  partOfProject Boolean   @default(false)
  studioId      Int?
  project       Project?  @relation("ProposalToProject")
  challenge     Challenge @relation(fields: [challengeId], references: [id])
  Studio        Studio?   @relation(fields: [studioId], references: [id])
}

model Project {
  id             Int                   @id @default(autoincrement())
  challengeId    Int                   @unique
  proposalId     Int                   @unique
  investment     Int
  milestones     Json
  createdAt      DateTime              @default(now())
  challenge      Challenge             @relation(fields: [challengeId], references: [id])
  proposal       Proposal              @relation("ProposalToProject", fields: [proposalId], references: [id])
  collaborators  ProjectCollaborator[]
}

model ProjectCollaborator {
  id           Int         @id @default(autoincrement())
  projectId    Int
  studioId     Int?
  corporateId  Int?
  governmentId Int?
  investorId   Int?
  role         String
  invitedAt    DateTime    @default(now())
  corporate    Corporate?  @relation(fields: [corporateId], references: [id])
  government   Government? @relation(fields: [governmentId], references: [id])
  investor     Investor?   @relation(fields: [investorId], references: [id])
  project      Project     @relation(fields: [projectId], references: [id])
  studio       Studio?     @relation(fields: [studioId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  sender    String
  recipient String
  content   String
  createdAt DateTime @default(now())
}

model LegalDoc {
  id         Int      @id @default(autoincrement())
  type       String
  fileUrl    String
  uploadedAt DateTime @default(now())
}